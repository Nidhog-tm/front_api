{"version":3,"sources":["Layout.js","Top.js","Footer.js","Header.js","Main.js","ListItem.js","App_list.js","serviceWorker.js","index.js"],"names":["Layout","this","props","children","React","Component","Top","handleClick","bind","history","push","className","style","textAlign","onSubmit","handleSubmit","placeholder","onClick","withRouter","Footer","Header","position","paddingTop","to","paddingRight","Main","ListItem","test_id","name","App","state","list","getDataFromApi","axios","get","then","response","console","log","JSON","parse","data","body","result","setState","map","Boolean","window","location","hostname","match","ReactDOM","render","basename","exact","path","component","App_list","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qTAEqBA,E,uKAEjB,OACI,6BACI,8DACCC,KAAKC,MAAMC,c,GALYC,IAAMC,W,QCCpCC,E,kDACF,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IACDK,YAAc,EAAKA,YAAYC,KAAjB,gBAFL,E,0DAMlBP,KAAKC,MAAMO,QAAQC,KAAK,W,+BAGxB,OACI,6BACI,yBAAKC,UAAU,OAAOC,MAAO,CAACC,UAAW,WACzC,wDACA,0BAAMC,SAAUb,KAAKc,cACjB,2BAAOC,YAAY,WAAU,6BAAK,6BAClC,2BAAOA,YAAY,aAAY,6BAAK,6BACpC,yBAAKJ,MAAO,CAACC,UAAU,UACvB,4BAAQI,QAAShB,KAAKM,aAAtB,oC,GAlBEH,IAAMC,WA2BTa,cAAWZ,GC5BLa,E,uKAEjB,OACE,4BAAQP,MAAO,CAACC,UAAW,WACzB,6BACA,qE,GAL4BT,IAAMC,WCGpCe,E,kDACJ,WAAYlB,GAAO,IAAD,8BAChB,cAAMA,IACDK,YAAc,EAAKA,YAAYC,KAAjB,gBAFH,E,0DAMlBP,KAAKC,MAAMO,QAAQC,KAAK,O,+BAGtB,OACE,gCACG,yBAAKE,MAAO,CAACS,SAAS,WAAYR,UAAU,QAASS,WAAY,SAC/D,kBAAC,IAAD,CAAMC,GAAG,QAAQX,MAAO,CAACY,aAAc,QAAvC,4BACA,kBAAC,IAAD,CAAMD,GAAG,QAAQX,MAAO,CAACY,aAAc,QAAvC,8CACA,4BAAQP,QAAShB,KAAKM,aAAtB,mCAEF,kC,GAjBYH,IAAMC,WAuBZa,cAAWE,GCvBLK,E,uKAEjB,OACI,6BACA,kBAAC,EAAD,MACI,yBAAKd,UAAU,QACX,yDAER,kBAAC,EAAD,W,GAR0BP,IAAMC,W,0CCczBqB,G,mLAfH,IAAD,EAIHzB,KAAKC,MAFPyB,EAFK,EAELA,QACAC,EAHK,EAGLA,KAGF,OACE,yBAAKjB,UAAU,YACb,yBAAKA,UAAU,mBAAmBgB,GAClC,yBAAKhB,UAAU,iBAAiBiB,Q,GAVjBvB,cCOFwB,E,kDACjB,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAED4B,MAAQ,CAETC,KAAM,IALK,E,iEAUf9B,KAAK+B,mB,4KAICC,IAAMC,IAjBC,4EAkBRC,MAAK,SAACC,GAEHC,QAAQC,IAAIC,KAAKC,MAAMJ,EAASK,KAAKC,KAAKA,MAAMC,QAGhD,EAAKC,SAAS,CACVb,KAAMQ,KAAKC,MAAMJ,EAASK,KAAKC,KAAKA,MAAMC,SAE9CN,QAAQC,IAAI,EAAKR,MAAMC,S,gIAI/B,OACI,6BACA,kBAAC,EAAD,MACI,yBAAKpB,UAAU,QACX,qEAEJ,yBAAKA,UAAU,OAGVV,KAAK6B,MAAMC,KAAKc,KAAI,SAAAd,GAAI,OACrB,kBAAC,EAAD,CACAJ,QAASI,EAAKJ,QACdC,KAAMG,EAAKH,WAIvB,kBAAC,EAAD,W,GA5CqBxB,IAAMC,WCEnByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAS,4BACf,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAKC,UAAWlD,IAClC,kBAAC,IAAD,CAAOiD,KAAK,SAASC,UAAW/B,IAChC,kBAAC,IAAD,CAAO8B,KAAK,SAASC,UAAWC,MAGtCC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.fce1bd7e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Layout extends React.Component {\n  render() {\n    return (\n        <div>\n            <h1>ユーザ管理</h1>\n            {this.props.children}\n        </div>\n      \n    );\n  }\n}","import React from \"react\";\nimport { withRouter } from 'react-router-dom';\n\nclass Top extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this)\n        }\n\n    handleClick(){\n    this.props.history.push('/main')\n    }\n    render() {\n    return (\n        <div>\n            <div className=\"main\" style={{textAlign: \"center\"}}>\n            <h1>ログイン</h1>\n            <form onSubmit={this.handleSubmit}>\n                <input placeholder=\"userid\"/><br/><br/>\n                <input placeholder=\"password\"/><br/><br/>\n                <div style={{textAlign:\"cener\"}}>\n                <button onClick={this.handleClick}>ログイン</button>\n                </div>\n            </form>\n            </div>\n        </div>\n    );\n    }\n}\n\nexport default withRouter(Top)","import React from \"react\";\n\nexport default class Footer extends React.Component {\n  render() {\n    return (\n      <footer style={{textAlign: \"center\"}}>\n        <hr/>\n        <span>フッタです</span>\n      </footer>\n    );\n  }\n}\n\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom';\n\n//ヘッダの定義\nclass Header extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleClick = this.handleClick.bind(this)\n    }\n\n  handleClick(){\n  this.props.history.push('/')\n  }\n  render() {\n    return (\n      <header>\n         <div style={{position:\"relative\", textAlign:\"right\", paddingTop: \"30px\"}}>\n           <Link to=\"/main\" style={{paddingRight: \"5px\"}}>メニュー</Link>\n           <Link to=\"/list\" style={{paddingRight: \"5px\"}}>ユーザーリスト</Link>\n           <button onClick={this.handleClick}>ログアウト</button>\n         </div>\n         <hr/>\n       </header>\n    );\n  }\n}\n\nexport default withRouter(Header)\n","import React from \"react\";\n\nimport Footer from \"./Footer.js\";\nimport Header from \"./Header.js\";\n\nexport default class Main extends React.Component {\n  render() {\n    return (\n        <div>\n        <Header/>\n            <div className=\"main\">\n                <h2>メニュー</h2>\n            </div>\n        <Footer/>\n        </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './ListItem.css';\n\nclass ListItem extends Component {\n  render() {\n    const {\n      test_id,\n      name\n    } = this.props;\n\n    return (\n      <div className=\"ListItem\">\n        <div className=\"ListItem-testID\">{test_id}</div>\n        <div className=\"ListItem-name\">{name}</div>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;","import React from \"react\";\nimport axios from 'axios';\n\nimport './App_list.css';\nimport ListItem from \"./ListItem.js\"\nimport Footer from \"./Footer.js\";\nimport Header from \"./Header.js\";\n\nconst API_BASE_URL = 'https://mdntueu7u8.execute-api.ap-northeast-1.amazonaws.com/Prod/getlist';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // test_id: ``\n            list: []\n        }\n    }\n    componentWillMount() {\n        // コンポーネントがマウントされる前にデータを取得する\n        this.getDataFromApi();\n    }\n    async getDataFromApi() {\n        // APIをコール\n        await axios.get(API_BASE_URL)\n            .then((response) => {\n                // log \n                console.log(JSON.parse(response.data.body.body).result);\n\n                // APIから取得したデータをstateに保存\n                this.setState({\n                    list: JSON.parse(response.data.body.body).result\n                });\n                console.log(this.state.list);\n            })\n    }\n    render() {\n        return (\n            <div>\n            <Header/>\n                <div className=\"main\">\n                    <h2>ユーザリスト</h2>\n                </div>\n                <div className=\"App\">\n                    {/* {this.state.test_id} */}\n                    {/* list 配列の要素数分 ListItem コンポーネントを展開 */}\n                    {this.state.list.map(list => (\n                        <ListItem\n                        test_id={list.test_id}\n                        name={list.name}\n                        />\n                    ))}\n                </div>\n            <Footer/>\n            </div>\n        );\n    }\n}\n\n// index.htmlの.containerに描画する\n// ReactDOM.render(<App />, document.querySelector('.container'));\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './index.css';\nimport Layout from \"./Layout\";\nimport Top from \"./Top\";\nimport Main from \"./Main\";\nimport App_list from './App_list';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename=\"{process.env.PUBLIC_URL}\">\n    <Layout>\n        <Route exact path=\"./\" component={Top}></Route>\n        <Route path=\"./main\" component={Main}></Route>\n        <Route path=\"./list\" component={App_list}></Route>\n    </Layout>\n  </Router>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}